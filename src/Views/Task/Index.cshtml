@model IEnumerable<SmartPlanner.Application.DTOs.TaskDTO>

@{
    ViewData["Title"] = "My Tasks";
    var searchModel = ViewBag.SearchModel as SmartPlanner.Application.DTOs.TaskSearchDTO;
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-lg-flex">
                        <div>
                            <h5 class="mb-0">My Tasks</h5>
                            <p class="text-sm mb-0">Manage your tasks and assignments</p>
                        </div>
                        <div class="ms-auto my-auto mt-lg-0 mt-4">
                            <div class="ms-auto my-auto">
                                <a href="@Url.Action("Create")" class="btn bg-gradient-primary btn-sm mb-0">
                                    <i class="fas fa-plus"></i>&nbsp;&nbsp;Add New Task
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-0">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show mx-4" role="alert">
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show mx-4" role="alert">
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <!-- Search and Filter Form -->
                    <div class="card mx-4 mb-4">
                        <div class="card-body">
                            <form method="get" asp-action="Index">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label class="form-control-label">Search</label>
                                            <input name="SearchTerm" value="@searchModel?.SearchTerm" class="form-control" placeholder="Search tasks..." />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label class="form-control-label">Subject</label>
                                            <select name="SubjectId" class="form-control">
                                                <option value="">All Subjects</option>
                                                @if (ViewBag.Subjects != null)
                                                {
                                                    @foreach (var item in ViewBag.Subjects as SelectList)
                                                    {
                                                        <option value="@item.Value" selected="@item.Selected">@item.Text</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label class="form-control-label">Status</label>
                                            <select name="Status" class="form-control">
                                                <option value="">All Tasks</option>
                                                <option value="1" selected="@(searchModel?.Status == SmartPlanner.Application.DTOs.TaskStatus.Pending)">Pending</option>
                                                <option value="2" selected="@(searchModel?.Status == SmartPlanner.Application.DTOs.TaskStatus.Completed)">Completed</option>
                                                <option value="3" selected="@(searchModel?.Status == SmartPlanner.Application.DTOs.TaskStatus.Overdue)">Overdue</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label class="form-control-label">From Date</label>
                                            <input name="FromDate" type="date" value="@searchModel?.FromDate?.ToString("yyyy-MM-dd")" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label class="form-control-label">To Date</label>
                                            <input name="ToDate" type="date" value="@searchModel?.ToDate?.ToString("yyyy-MM-dd")" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        <div class="form-group">
                                            <label class="form-control-label">&nbsp;</label>
                                            <button type="submit" class="btn bg-gradient-info w-100">
                                                <i class="fas fa-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-flush" id="tasks-table">
                                <thead class="thead-light">
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Task</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Subject</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Deadline</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Complete</th>
                                        <th class="text-secondary opacity-7">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in Model)
                                    {
                                        <tr class="@(task.IsOverdue ? "table-warning" : "")">
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@task.Title</h6>
                                                        @if (!string.IsNullOrEmpty(task.Description))
                                                        {
                                                            <p class="text-xs text-secondary mb-0">@task.Description</p>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">
                                                    @(string.IsNullOrEmpty(task.SubjectName) ? "No subject" : task.SubjectName)
                                                </p>
                                            </td>
                                            <td class="align-middle text-center text-sm">
                                                <span class="text-xs font-weight-bold">@task.Deadline.ToString("MMM dd, yyyy")</span>
                                                <br />
                                                <span class="text-xs text-secondary">@task.Deadline.ToString("hh:mm tt")</span>
                                            </td>
                                            <td class="align-middle text-center text-sm">
                                                @if (task.IsDone)
                                                {
                                                    <span class="badge badge-sm bg-gradient-success">Completed</span>
                                                }
                                                else if (task.IsOverdue)
                                                {
                                                    <span class="badge badge-sm bg-gradient-danger">Overdue</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-sm bg-gradient-warning">Pending</span>
                                                }
                                            </td>
                                            <td class="align-middle text-center">
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" type="checkbox" @(task.IsDone ? "checked" : "") 
                                                           onchange="toggleTaskStatus('@task.Id')" id="task-@task.Id">
                                                </div>
                                            </td>
                                            <td class="align-middle">
                                                <a href="@Url.Action("Edit", new { id = task.Id })" class="text-secondary font-weight-bold text-xs me-2" data-toggle="tooltip" data-original-title="Edit task">
                                                    <i class="fas fa-edit"></i> Edit
                                                </a>
                                                <a href="javascript:void(0)" onclick="deleteTask('@task.Id', '@task.Title')" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete task">
                                                    <i class="fas fa-trash"></i> Delete
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="icon icon-shape icon-lg bg-gradient-primary shadow text-center border-radius-lg">
                                <i class="fas fa-tasks opacity-10"></i>
                            </div>
                            <h5 class="mt-4">No tasks found</h5>
                            <p class="text-sm">
                                @if (searchModel != null && (!string.IsNullOrEmpty(searchModel.SearchTerm) || searchModel.SubjectId.HasValue || searchModel.Status.HasValue))
                                {
                                    <text>No tasks match your search criteria. Try adjusting your filters.</text>
                                }
                                else
                                {
                                    <text>Start by creating your first task to stay organized.</text>
                                }
                            </p>
                            <a href="@Url.Action("Create")" class="btn bg-gradient-primary">
                                <i class="fas fa-plus"></i>&nbsp;&nbsp;Create Your First Task
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the task "<span id="taskTitle"></span>"?</p>
                <p class="text-warning"><small><i class="fas fa-exclamation-triangle"></i> This action cannot be undone.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete Task</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let taskIdToDelete = null;

        function deleteTask(taskId, taskTitle) {
            taskIdToDelete = taskId;
            document.getElementById('taskTitle').textContent = taskTitle;
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        document.getElementById('confirmDelete').addEventListener('click', function() {
            if (taskIdToDelete) {
                fetch('@Url.Action("Delete")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: 'id=' + encodeURIComponent(taskIdToDelete)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the task.');
                });
            }
        });

        function toggleTaskStatus(taskId) {
            fetch('@Url.Action("ToggleStatus")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: 'id=' + encodeURIComponent(taskId)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                    // Revert checkbox state
                    document.getElementById('task-' + taskId).checked = !document.getElementById('task-' + taskId).checked;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the task status.');
                // Revert checkbox state
                document.getElementById('task-' + taskId).checked = !document.getElementById('task-' + taskId).checked;
            });
        }

        // Add anti-forgery token to the page for AJAX requests
        document.addEventListener('DOMContentLoaded', function() {
            if (!document.querySelector('input[name="__RequestVerificationToken"]')) {
                var form = document.createElement('form');
                form.style.display = 'none';
                form.innerHTML = '@Html.AntiForgeryToken()';
                document.body.appendChild(form);
            }
        });
    </script>
}